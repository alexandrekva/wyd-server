package com.example.extensions

import com.example.domain.packets.request.RequestPacket
import com.example.domain.packets.PacketHeader
import com.example.domain.packets.PacketUtils
import java.nio.ByteBuffer
import java.nio.ByteOrder

fun ByteBuffer.printBytes() {
    array().printBytes()
}

fun ByteBuffer.printBytesHex() {
    array().printBytesHex()
}

fun ByteBuffer.size(): Int {
    return array().size
}


fun ByteBuffer.cleanConnectionAndLoginPacket(): ByteBuffer {
    val treatedBuffer = PacketUtils.buildByteBuffer(116)

    for (i in 4 until size()) {
        treatedBuffer.put(get(i))
    }

    return treatedBuffer
}

fun ByteBuffer.decryptPacket() {
    position(0)

    val packetSize = getShort(PacketHeader.SIZE).toUShort().toInt()
    val key = get(PacketHeader.KEY).toUByte().toInt()
    var keyIncrement = CryptoKeys.values[key * 2]
    var checkSumEnc = 0
    var checkSumDec = 0


    for (i in 4 until packetSize) {
        val currentByte = get(i).toUByte().toInt()
        val thisIterator = i and 3
        val keyResultIndex = (keyIncrement and 0x800000ff.toInt()) * 2 + 1
        val keyResult = CryptoKeys.values[keyResultIndex]

        checkSumEnc += currentByte
        when (thisIterator) {
            0 -> put(i, (currentByte - (keyResult shl 1)).toByte())
            1 -> put(i, (currentByte + (keyResult shr 3)).toByte())
            2 -> put(i, (currentByte - (keyResult shl 2)).toByte())
            3 -> put(i, (currentByte + (keyResult shr 5)).toByte())
        }

        checkSumDec += get(i).toUByte().toInt()
        keyIncrement++
    }

    if (get(PacketHeader.HASH_KEY) != (checkSumEnc - checkSumDec).toByte()) {
        throw Exception("Decryptation failed")
    }
}

fun ByteBuffer.encryptPacket() {
    position(0)


    val packetSize = getShort(PacketHeader.SIZE).toUShort().toInt()
    val key = get(PacketHeader.KEY).toUByte().toInt()
    var keyIncrement = CryptoKeys.values[key * 2] and 0xff
    var checkSumEnc = 0
    var checkSumDec = 0

    for (i in 4 until packetSize) {
        val currentByte = get(i).toUByte().toInt()
        val thisIterator = i and 3
        val keyResultIndex = (keyIncrement and 0x800000ff.toInt()) * 2 + 1
        val keyResult = CryptoKeys.values[keyResultIndex]

        checkSumDec += get(i).toUByte().toInt()

        when (thisIterator) {
            0 -> put(i, (currentByte + (keyResult * 2)).toByte())
            1 -> put(i, (currentByte - (keyResult shr 3)).toByte())
            2 -> put(i, (currentByte + (keyResult * 4)).toByte())
            3 -> put(i, (currentByte - (keyResult shr 5)).toByte())
        }

        checkSumEnc += get(i).toUByte().toInt()
        keyIncrement++
    }

    put(PacketHeader.HASH_KEY, (checkSumEnc - checkSumDec).toByte())
}

fun ByteBuffer.getPacketHeader(): PacketHeader {
    position(0)

    val size = getShort().toUShort()
    val key = get().toUByte()
    val hash = get().toUByte()
    val code = getShort()
    val index = getShort()
    val timestamp = getInt().toUInt()

    return PacketHeader(size, key, hash, code, index, timestamp)
}

fun ByteBuffer.getPacketContent(): ByteArray {
    return array().slice(12 until size()).toByteArray()
}

fun ByteBuffer.getRequestPacket(): RequestPacket {
    return RequestPacket(
        header = getPacketHeader(), content = getPacketContent()
    )
}

object CryptoKeys {
    val values = intArrayOf(
        0x84,
        0x87,
        0x37,
        0xd7,
        0xea,
        0x79,
        0x91,
        0x7d,
        0x4b,
        0x4b,
        0x85,
        0x7d,
        0x87,
        0x81,
        0x91,
        0x7c,
        0x0f,
        0x73,
        0x91,
        0x91,
        0x87,
        0x7d,
        0x0d,
        0x7d,
        0x86,
        0x8f,
        0x73,
        0x0f,
        0xe1,
        0xdd,
        0x85,
        0x7d,
        0x05,
        0x7d,
        0x85,
        0x83,
        0x87,
        0x9c,
        0x85,
        0x33,
        0x0d,
        0xe2,
        0x87,
        0x19,
        0x0f,
        0x79,
        0x85,
        0x86,
        0x37,
        0x7d,
        0xd7,
        0xdd,
        0xe9,
        0x7d,
        0xd7,
        0x7d,
        0x85,
        0x79,
        0x05,
        0x7d,
        0x0f,
        0xe1,
        0x87,
        0x7e,
        0x23,
        0x87,
        0xf5,
        0x79,
        0x5f,
        0xe3,
        0x4b,
        0x83,
        0xa3,
        0xa2,
        0xae,
        0x0e,
        0x14,
        0x7d,
        0xde,
        0x7e,
        0x85,
        0x7a,
        0x85,
        0xaf,
        0xcd,
        0x7d,
        0x87,
        0xa5,
        0x87,
        0x7d,
        0xe1,
        0x7d,
        0x88,
        0x7d,
        0x15,
        0x91,
        0x23,
        0x7d,
        0x87,
        0x7c,
        0x0d,
        0x7a,
        0x85,
        0x87,
        0x17,
        0x7c,
        0x85,
        0x7d,
        0xac,
        0x80,
        0xbb,
        0x79,
        0x84,
        0x9b,
        0x5b,
        0xa5,
        0xd7,
        0x8f,
        0x05,
        0x0f,
        0x85,
        0x7e,
        0x85,
        0x80,
        0x85,
        0x98,
        0xf5,
        0x9d,
        0xa3,
        0x1a,
        0x0d,
        0x19,
        0x87,
        0x7c,
        0x85,
        0x7d,
        0x84,
        0x7d,
        0x85,
        0x7e,
        0xe7,
        0x97,
        0x0d,
        0x0f,
        0x85,
        0x7b,
        0xea,
        0x7d,
        0xad,
        0x80,
        0xad,
        0x7d,
        0xb7,
        0xaf,
        0x0d,
        0x7d,
        0xe9,
        0x3d,
        0x85,
        0x7d,
        0x87,
        0xb7,
        0x23,
        0x7d,
        0xe7,
        0xb7,
        0xa3,
        0x0c,
        0x87,
        0x7e,
        0x85,
        0xa5,
        0x7d,
        0x76,
        0x35,
        0xb9,
        0x0d,
        0x6f,
        0x23,
        0x7d,
        0x87,
        0x9b,
        0x85,
        0x0c,
        0xe1,
        0xa1,
        0x0d,
        0x7f,
        0x87,
        0x7d,
        0x84,
        0x7a,
        0x84,
        0x7b,
        0xe1,
        0x86,
        0xe8,
        0x6f,
        0xd1,
        0x79,
        0x85,
        0x19,
        0x53,
        0x95,
        0xc3,
        0x47,
        0x19,
        0x7d,
        0xe7,
        0x0c,
        0x37,
        0x7c,
        0x23,
        0x7d,
        0x85,
        0x7d,
        0x4b,
        0x79,
        0x21,
        0xa5,
        0x87,
        0x7d,
        0x19,
        0x7d,
        0x0d,
        0x7d,
        0x15,
        0x91,
        0x23,
        0x7d,
        0x87,
        0x7c,
        0x85,
        0x7a,
        0x85,
        0xaf,
        0xcd,
        0x7d,
        0x87,
        0x7d,
        0xe9,
        0x3d,
        0x85,
        0x7d,
        0x15,
        0x79,
        0x85,
        0x7d,
        0xc1,
        0x7b,
        0xea,
        0x7d,
        0xb7,
        0x7d,
        0x85,
        0x7d,
        0x85,
        0x7d,
        0x0d,
        0x7d,
        0xe9,
        0x73,
        0x85,
        0x79,
        0x05,
        0x7d,
        0xd7,
        0x7d,
        0x85,
        0xe1,
        0xb9,
        0xe1,
        0x0f,
        0x65,
        0x85,
        0x86,
        0x2d,
        0x7d,
        0xd7,
        0xdd,
        0xa3,
        0x8e,
        0xe6,
        0x7d,
        0xde,
        0x7e,
        0xae,
        0x0e,
        0x0f,
        0xe1,
        0x89,
        0x7e,
        0x23,
        0x7d,
        0xf5,
        0x79,
        0x23,
        0xe1,
        0x4b,
        0x83,
        0x0c,
        0x0f,
        0x85,
        0x7b,
        0x85,
        0x7e,
        0x8f,
        0x80,
        0x85,
        0x98,
        0xf5,
        0x7a,
        0x85,
        0x1a,
        0x0d,
        0xe1,
        0x0f,
        0x7c,
        0x89,
        0x0c,
        0x85,
        0x0b,
        0x23,
        0x69,
        0x87,
        0x7b,
        0x23,
        0x0c,
        0x1f,
        0xb7,
        0x21,
        0x7a,
        0x88,
        0x7e,
        0x8f,
        0xa5,
        0x7d,
        0x80,
        0xb7,
        0xb9,
        0x18,
        0xbf,
        0x4b,
        0x19,
        0x85,
        0xa5,
        0x91,
        0x80,
        0x87,
        0x81,
        0x87,
        0x7c,
        0x0f,
        0x73,
        0x91,
        0x91,
        0x84,
        0x87,
        0x37,
        0xd7,
        0x86,
        0x79,
        0xe1,
        0xdd,
        0x85,
        0x7a,
        0x73,
        0x9b,
        0x05,
        0x7d,
        0x0d,
        0x83,
        0x87,
        0x9c,
        0x85,
        0x33,
        0x87,
        0x7d,
        0x85,
        0x0f,
        0x87,
        0x7d,
        0x0d,
        0x7d,
        0xf6,
        0x7e,
        0x87,
        0x7d,
        0x88,
        0x19,
        0x89,
        0xf5,
        0xd1,
        0xdd,
        0x85,
        0x7d,
        0x8b,
        0xc3,
        0xea,
        0x7a,
        0xd7,
        0xb0,
        0x0d,
        0x7d,
        0x87,
        0xa5,
        0x87,
        0x7c,
        0x73,
        0x7e,
        0x7d,
        0x86,
        0x87,
        0x23,
        0x85,
        0x10,
        0xd7,
        0xdf,
        0xed,
        0xa5,
        0xe1,
        0x7a,
        0x85,
        0x23,
        0xea,
        0x7e,
        0x85,
        0x98,
        0xad,
        0x79,
        0x86,
        0x7d,
        0x85,
        0x7d,
        0xd7,
        0x7d,
        0xe1,
        0x7a,
        0xf5,
        0x7d,
        0x85,
        0xb0,
        0x2b,
        0x37,
        0xe1,
        0x7a,
        0x87,
        0x79,
        0x84,
        0x7d,
        0x73,
        0x73,
        0x87,
        0x7d,
        0x23,
        0x7d,
        0xe9,
        0x7d,
        0x85,
        0x7e,
        0x02,
        0x7d,
        0xdd,
        0x2d,
        0x87,
        0x79,
        0xe7,
        0x79,
        0xad,
        0x7c,
        0x23,
        0xda,
        0x87,
        0x0d,
        0x0d,
        0x7b,
        0xe7,
        0x79,
        0x9b,
        0x7d,
        0xd7,
        0x8f,
        0x05,
        0x7d,
        0x0d,
        0x34,
        0x8f,
        0x7d,
        0xad,
        0x87,
        0xe9,
        0x7c,
        0x85,
        0x80,
        0x85,
        0x79,
        0x8a,
        0xc3,
        0xe7,
        0xa5,
        0xe8,
        0x6b,
        0x0d,
        0x74,
        0x10,
        0x73,
        0x33,
        0x17,
        0x0d,
        0x37,
        0x21,
        0x19
    )
}